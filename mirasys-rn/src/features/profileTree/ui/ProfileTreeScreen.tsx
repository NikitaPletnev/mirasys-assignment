import React, {useEffect, useMemo, useRef, useState} from 'react';
import {
  View, Text, ActivityIndicator, FlatList,
  ListRenderItemInfo, RefreshControl, Pressable,
  Platform, UIManager, LayoutAnimation,
} from 'react-native';
import { useRootRepo, useChildrenRepoLazy } from '../api/repo';
import { PAGE_SIZE } from '../../../core/config';
import { insertChildren, removeSubtree, normalizeKind, Row } from '../model/flatten';

if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
  UIManager.setLayoutAnimationEnabledExperimental(true);
}
const animateNext = () => LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);

export default function ProfileTreeScreen() {
  const [rootAfter, setRootAfter] = useState<string | null>(null);
  const [flat, setFlat] = useState<Row[]>([]);
  const initializedRef = useRef(false); // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

  const root = useRootRepo(rootAfter);
  const childrenRepo = useChildrenRepoLazy();

  useEffect(() => {
    if (initializedRef.current) return;
    if (root.loading) return;

    const src = root.nodes ?? [];
    if (!src.length) return;

    const rows: Row[] = src
      .filter(n => !!n?.id)
      .map(n => ({
        id: n.id!,
        name: n.name ?? '',
        kind: normalizeKind(n.__typename),
        parentId: n.parentNodeId ?? null,
        depth: 0,
        isExpanded: false,
        hasNextPage: false,
        endCursor: null,
      }));

    setFlat(rows);
    initializedRef.current = true;

    // debug: —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∫–ª–∞–¥—ë–º
    console.log('INIT flat', rows.length, rows.slice(0, 3));
  }, [root.loading, root.nodes]);

  // 1) –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ—Ä–Ω–µ–≤—ã—Ö –Ω–æ–¥ (—Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ)
  const baseRows: Row[] = useMemo(() => {
    const nodes = root.nodes ?? [];
    return nodes
      .filter((n) => !!n?.id)
      .map((n) => ({
        id: n.id!,
        name: n.name ?? '',
        kind: normalizeKind(n.__typename),
        parentId: n.parentNodeId ?? null,
        depth: 0,
        isExpanded: false,
        hasNextPage: false,
        endCursor: null,
      }));
  }, [root.nodes]); // ‚Üê –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–ø–æ–ª–ª–æ

  // 2) –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ –∫–æ—Ä–Ω–µ–≤—ã–µ –Ω–æ–¥—ã
  useEffect(() => {
    if (root.loading) return;           // –∂–¥—ë–º —Å–µ—Ç—å
    if (flat.length > 0) return;        // —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (baseRows.length === 0) return;  // —Ä–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ ‚Äî –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å
    setFlat(baseRows);
  }, [root.loading, baseRows.length, flat.length]);

  async function loadMoreRoot() {
    if (!root.pageInfo?.hasNextPage) return;
    await root.loadMore();
    setRootAfter(root.pageInfo?.endCursor ?? null);
  }

  async function onToggleFolder(r: Row) {
    if (r.kind !== 'Folder') return;

    if (r.isExpanded) {
      animateNext();
      setFlat((prev) => removeSubtree(prev, r.id));
      return;
    }

    const res = await childrenRepo.load(r.id, null);
    const kids = (childrenRepo.nodes ?? [])
      .filter((n) => !!n?.id)
      .map((n) => ({
        id: n.id!, name: n.name ?? '', kind: normalizeKind(n.__typename), parentId: n.parentNodeId ?? r.id,
      }));
    const pageInfo = {
      endCursor: res.data?.listProfileNodes?.pageInfo?.endCursor ?? null,
      hasNextPage: !!res.data?.listProfileNodes?.pageInfo?.hasNextPage,
    };

    animateNext();
    setFlat((prev) => insertChildren(prev, r.id, r.depth + 1, kids, pageInfo));
  }

  async function onLoadMoreChildren(parent: Row) {
    if (parent.kind !== 'Folder' || !parent.isExpanded) return;
    const after = parent.endCursor ?? null;

    const res = await childrenRepo.load(parent.id, after);
    const kids = (childrenRepo.nodes ?? [])
      .filter((n) => !!n?.id)
      .map((n) => ({
        id: n.id!, name: n.name ?? '', kind: normalizeKind(n.__typename), parentId: n.parentNodeId ?? parent.id,
      }));
    const pageInfo = {
      endCursor: res.data?.listProfileNodes?.pageInfo?.endCursor ?? null,
      hasNextPage: !!res.data?.listProfileNodes?.pageInfo?.hasNextPage,
    };

    animateNext();
    setFlat((prev) => insertChildren(prev, parent.id, parent.depth + 1, kids, pageInfo));
  }

  const renderItem = ({ item }: ListRenderItemInfo<Row>) => {
    const showMoreChildren = item.kind === 'Folder' && item.isExpanded && item.hasNextPage;
    return (
      <View>
        <NodeRow row={item} onToggle={onToggleFolder} />
        {showMoreChildren && (
          <Pressable style={{ paddingLeft: (item.depth + 1) * 16, paddingVertical: 6 }}
                     onPress={() => onLoadMoreChildren(item)}>
            <Text>Load more items‚Ä¶</Text>
          </Pressable>
        )}
      </View>
    );
  };

  return (
    <View style={{ flex: 1, padding: 12 }}>
      {/* –í—Ä–µ–º–µ–Ω–Ω—ã–π HUD ‚Äî –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
      <View style={{ padding: 8, borderWidth: 1, borderColor: '#eee', marginBottom: 8, borderRadius: 8 }}>
        <Text>root.loading: {String(root.loading)}</Text>
        <Text>root.nodes: {String(root.nodes?.length ?? 0)}</Text>
        <Text>baseRows: {String(baseRows.length)}</Text>
        <Text>flat: {String(flat.length)}</Text>
        <Text>error: {String(root.error?.message || '‚Äî')}</Text>
      </View>

      <FlatList
        style={{ flex: 1 }}
        data={flat}
        keyExtractor={(r, i) => `${r.id || 'noid'}-${r.parentId || 'root'}-${r.depth}-${i}`}
        renderItem={renderItem}
        onEndReached={loadMoreRoot}
        onEndReachedThreshold={0.6}
        ListFooterComponent={root.loading || childrenRepo.loading ? <ActivityIndicator /> : null}
      />
      {childrenRepo.error && <Text style={{ color: '#b00', padding: 8 }}>Failed to load children</Text>}
      {root.error && <Text style={{ color: '#b00', padding: 8 }}>Failed to load root</Text>}
    </View>
  );
}

function NodeRow({ row, onToggle }: { row: Row; onToggle: (r: Row) => void }) {
  const pad = { paddingLeft: row.depth * 16 };
  const isFolder = row.kind === 'Folder';
  const icon =
    row.kind === 'Folder' ? (row.isExpanded ? 'üìÇ' : 'üìÅ') :
      row.kind === 'VideoChannel' ? 'üé•' :
        row.kind === 'DigitalInput' ? 'üîå' : 'üîã';

  return (
    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8, paddingVertical: 6 }}>
      {isFolder && (
        <Pressable onPress={() => onToggle(row)} style={{ paddingHorizontal: 6 }}>
          <Text>{row.isExpanded ? '‚ñæ' : '‚ñ∏'}</Text>
        </Pressable>
      )}
      <Text aria-hidden style={{ width: 22, textAlign: 'center' }}>{icon}</Text>
      <Text style={[{ fontSize: 16 }, pad]}>{row.name}</Text>
    </View>
  );
}
